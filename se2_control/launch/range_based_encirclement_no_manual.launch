<launch>
  <!-- Range-Based Three Drone Encirclement System (No Manual Controller) -->
  <!-- This system achieves coordination using only LiDAR-like range measurements -->
  <!-- Use this launch file when you want to control target with move_target.py -->
  
  <!-- Drone 0 Simulator (Agent 1 - Red) -->
  <group ns="drone0">
    <node pkg="se2_control" type="se2_drone_simulator.py" name="se2_drone_simulator" output="screen">
      <param name="initial_x" value="0.0"/>
      <param name="initial_y" value="0.0"/>
      <param name="initial_yaw" value="0.0"/>
    </node>
    
    <!-- Range sensor simulator for drone0 -->
    <node pkg="se2_control" type="range_sensor_simulator.py" name="range_sensor_simulator" output="screen"/>
  </group>
  
  <!-- Drone 1 Simulator (Agent 2 - Green) -->
  <group ns="drone1">
    <node pkg="se2_control" type="se2_drone_simulator.py" name="se2_drone_simulator" output="screen">
      <param name="initial_x" value="3.0"/>
      <param name="initial_y" value="0.0"/>
      <param name="initial_yaw" value="0.0"/>
    </node>
    
    <!-- Range sensor simulator for drone1 -->
    <node pkg="se2_control" type="range_sensor_simulator.py" name="range_sensor_simulator" output="screen"/>
  </group>
  
  <!-- Target Drone (SE2 Target - Blue) -->
  <group ns="drone2">
    <node pkg="se2_control" type="se2_drone_simulator.py" name="se2_drone_simulator" output="screen">
      <param name="initial_x" value="5.0"/>
      <param name="initial_y" value="2.0"/>
      <param name="initial_yaw" value="0.0"/>
    </node>
    
    <!-- Range sensor simulator for target drone -->
    <node pkg="se2_control" type="range_sensor_simulator.py" name="range_sensor_simulator" output="screen"/>
  </group>
  
  <!-- Range-Based Encirclement Controller -->
  <node pkg="se2_control" type="range_based_encirclement.py" name="range_based_encirclement" output="screen" />
  
  <!-- NOTE: target_manual_controller is NOT included to avoid conflicts -->
  <!-- Use move_target.py or create custom control scripts instead -->
  
  <!-- Visualization nodes for drones -->
  <!-- Visualization for Drone 0 (Red - Agent 1) -->
  <node pkg="odom_visualization" name="drone_0_odom_visualization" type="odom_visualization" output="screen">
    <remap from="~odom" to="drone0/sim/odom"/>
    <param name="color/a" value="1.0"/>    
    <param name="color/r" value="1.0"/>        
    <param name="color/g" value="0.0"/>        
    <param name="color/b" value="0.0"/>       
    <param name="covariance_scale" value="100.0"/>       
    <param name="robot_scale" value="1.0"/>
    <param name="tf45" value="false"/>
    <param name="drone_id" value="0"/>
  </node>
  
  <!-- Visualization for Drone 1 (Green - Agent 2) -->
  <node pkg="odom_visualization" name="drone_1_odom_visualization" type="odom_visualization" output="screen">
    <remap from="~odom" to="drone1/sim/odom"/>
    <param name="color/a" value="1.0"/>    
    <param name="color/r" value="0.0"/>        
    <param name="color/g" value="1.0"/>        
    <param name="color/b" value="0.0"/>       
    <param name="covariance_scale" value="100.0"/>       
    <param name="robot_scale" value="1.0"/>
    <param name="tf45" value="false"/>
    <param name="drone_id" value="1"/>
  </node>
  
  <!-- Visualization for Target Drone (Blue - Target) -->
  <node pkg="odom_visualization" name="drone_2_odom_visualization" type="odom_visualization" output="screen">
    <remap from="~odom" to="drone2/sim/odom"/>
    <param name="color/a" value="1.0"/>    
    <param name="color/r" value="0.0"/>        
    <param name="color/g" value="0.0"/>        
    <param name="color/b" value="1.0"/>       
    <param name="covariance_scale" value="100.0"/>       
    <param name="robot_scale" value="1.0"/>
    <param name="tf45" value="false"/>
    <param name="drone_id" value="2"/>
  </node>

  <!-- RViz for visualization - use ego-planner rviz config -->
  <include file="$(find ego_planner)/launch/rviz.launch"/>

</launch>
