<launch>
  <!-- Load controller and PID parameters -->
  <rosparam file="$(find se2_control)/config/se2_controller.yaml" command="load" />
  <rosparam file="$(find se2_control)/config/pid_gains.yaml" command="load" ns="xray_source/gazebo_ros_control" />

  <!-- Load and start the controllers -->
  <rosparam file="$(find ranger_mini_control)/config/controller_v2.yaml" command="load" ns="xray_source"/>
  <rosparam file="$(find ranger_mini_control)/config/pid_gains_xray_source.yaml" command="load"/>
  <param name="robot_description" 
         command="$(find xacro)/xacro '$(find ranger_mini_v2_gazebo)/xacro/ranger_mini_xray_source.xacro'" />
  <node name="controller_spawner" pkg="controller_manager" type="spawner" 
        args="joint_state_controller four_wheel_steering_controller" ns="xray_source" output="screen" />
  <node name="robot_state_publisher" 
        pkg="robot_state_publisher" 
        type="robot_state_publisher">
    <remap from="joint_states" to="xray_source/joint_states"/>
  </node>
  <node name="static_transform_publisher" pkg="tf" type="static_transform_publisher"
        args="0 0 0 0 0 0 map base_link 100" />

  <!-- Start Gazebo with empty world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" />

  <!-- Spawn the robot at a higher position to simulate "flying" -->
  <node name="spawn_xray_source" pkg="gazebo_ros" type="spawn_model" 
        args="-urdf -param robot_description -model xray_source_robot -x 0 -y 0 -z 1.0 -R 0.0 -P 0.0 -Y 0.0"
        output="screen" />

  <!-- Start nodelet manager -->
  <node pkg="nodelet" type="nodelet" name="se2_control_manager" args="manager" output="screen" />

  <!-- Load the SE2 control nodelet in xray_source namespace -->
  <group ns="xray_source">
    <node pkg="se2_control" type="simple_controller.py" name="simple_controller" output="screen" />
  </group>

  <!-- Pose converter bridge for RViz goal setting -->
  <node name="pose_converter" pkg="se2_control" type="convert_pose.py" output="screen" />

  <!-- Start odom_to_path node for trajectory visualization -->
  <node name="odom_to_path" pkg="se2_control" type="odom_to_path.py" output="screen" />

  <!-- Start RViz -->
  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(find se2_control)/config/se2_control_visualization.rviz" required="true" />

  <!-- Start teleop node -->
  <node name="xray_source_simple_teleop" pkg="se2_control" type="xray_source_simple_teleop.py" output="screen" />
</launch> 