<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- Launch Empty World -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="worlds/empty.world"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Load PID gains first -->
  <rosparam file="$(find ranger_mini_control)/config/pid_gains_bed_trolley_stable.yaml" command="load"/>
  <rosparam file="$(find ranger_mini_control)/config/pid_gains_xray_source_stable.yaml" command="load"/>
  <rosparam file="$(find ranger_mini_control)/config/pid_gains_xray_detector_stable.yaml" command="load"/>

  <!-- Launch X-ray Detector Robot in its own namespace -->
  <group ns="xray_detector">
    <param name="robot_description" 
           command="$(find xacro)/xacro '$(find ranger_mini_v2_gazebo)/xacro/ranger_mini_xray_detector.xacro'" />

    <!-- Spawn X-ray Detector Robot -->
    <node name="spawn_xray_detector" pkg="gazebo_ros" type="spawn_model" 
          args="-urdf -param robot_description -model xray_detector_robot -x -3 -y -2 -z 0.2 -R 0.0 -P 0.0 -Y 0.0"
          output="screen" />

    <!-- Load and start the joint state controller for X-ray Detector -->
    <rosparam file="$(find ranger_mini_control)/config/controller_v2_clean.yaml" command="load" ns="xray_detector"/>
    <node name="xray_detector_controller_spawner" pkg="controller_manager" type="spawner" 
          args="joint_state_controller" ns="xray_detector" output="screen" />

    <!-- Robot State Publisher for X-ray Detector -->
    <node name="xray_detector_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" 
          respawn="false" output="screen" />

    <!-- Static Transform Publisher for X-ray Detector -->
    <node name="xray_detector_static_tf" pkg="tf" type="static_transform_publisher" 
          args="-3 -2 0 0 0 0 map xray_detector/base_link 100" />
  </group>

  <!-- Launch X-ray Source Robot in its own namespace -->
  <group ns="xray_source">
    <param name="robot_description" 
           command="$(find xacro)/xacro '$(find ranger_mini_v2_gazebo)/xacro/ranger_mini_xray_source.xacro'" />

    <!-- Spawn X-ray Source Robot -->
    <node name="spawn_xray_source" pkg="gazebo_ros" type="spawn_model" 
          args="-urdf -param robot_description -model xray_source_robot -x 2 -y 2 -z 0.2 -R 0.0 -P 0.0 -Y 0.0"
          output="screen" />

    <!-- Load and start the joint state controller for X-ray Source -->
    <rosparam file="$(find ranger_mini_control)/config/controller_v2_clean.yaml" command="load" ns="xray_source"/>
    <node name="xray_source_controller_spawner" pkg="controller_manager" type="spawner" 
          args="joint_state_controller" ns="xray_source" output="screen" />

    <!-- Robot State Publisher for X-ray Source -->
    <node name="xray_source_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" 
          respawn="false" output="screen" />

    <!-- Static Transform Publisher for X-ray Source -->
    <node name="xray_source_static_tf" pkg="tf" type="static_transform_publisher" 
          args="0 0 0 0 0 0 map xray_source/base_link 100" />
  </group>

  <!-- Launch Bed Trolley Robot in its own namespace -->
  <group ns="bed_trolley">
    <param name="robot_description" 
           command="$(find xacro)/xacro '$(find ranger_mini_v2_gazebo)/xacro/ranger_mini_bed_trolly.xacro'" />

    <!-- Spawn Bed Trolley Robot -->
    <node name="spawn_bed_trolley" pkg="gazebo_ros" type="spawn_model" 
          args="-urdf -param robot_description -model bed_trolley_robot -x 3 -y 2 -z 0.2 -R 0.0 -P 0.0 -Y 0.0"
          output="screen" />

    <!-- Load and start the joint state controller for Bed Trolley -->
    <rosparam file="$(find ranger_mini_control)/config/controller_v2_clean.yaml" command="load" ns="bed_trolley"/>
    <node name="bed_trolley_controller_spawner" pkg="controller_manager" type="spawner" 
          args="joint_state_controller" ns="bed_trolley" output="screen" />

    <!-- Robot State Publisher for Bed Trolley -->
    <node name="bed_trolley_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" 
          respawn="false" output="screen" />

    <!-- Static Transform Publisher for Bed Trolley -->
    <node name="bed_trolley_static_tf" pkg="tf" type="static_transform_publisher" 
          args="3 2 0 0 0 0 map bed_trolley/base_link 100" />
  </group>

</launch> 